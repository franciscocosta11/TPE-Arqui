#ifndef GOLF_H
#define GOLF_H

#include <stdint.h>

// CONSTANTES DEL JUEGO

extern int SCREEN_WIDTH;
extern int SCREEN_HEIGHT;
#define BALL_SIZE 8
#define PADDLE_WIDTH 15
#define PADDLE_HEIGHT 60
#define MAX_SPEED 8

// COLORES DEL JUEGO
#define COLOR_GREEN   0x00AA00
#define COLOR_WHITE   0xFFFFFF
#define COLOR_GRAY    0x808080
#define COLOR_BLACK   0x000000
#define COLOR_RED     0xFF0000
#define COLOR_YELLOW  0xFFFF00
#define COLOR_BLUE    0x0000FF
#define COLOR_CYAN    0x00FFFF
#define COLOR_MAGENTA 0xFF00FF

// ESTADOS DEL JUEGO
#define GAME_MENU 0
#define GAME_PLAYING 1
#define GAME_LEVEL_COMPLETE 2
#define GAME_OVER 3

// MODOS DE JUEGO
#define MODE_SINGLE 1
#define MODE_MULTIPLAYER 2

// ESTRUCTURAS DEL JUEGO

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wmissing-braces"

const unsigned char font_8x12[95][12] = {	// offset 0x20
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
  0x00, 0x18, 0x3C, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, // !
  0x36, 0x36, 0x36, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // "
  0x00, 0x6C, 0x6C, 0x6C, 0xFE, 0x6C, 0x6C, 0xFE, 0x6C, 0x6C, 0x00, 0x00, // #
  0x18, 0x18, 0x7C, 0xC6, 0xC0, 0x78, 0x3C, 0x06, 0xC6, 0x7C, 0x18, 0x18, // $
  0x00, 0x00, 0x00, 0x62, 0x66, 0x0C, 0x18, 0x30, 0x66, 0xC6, 0x00, 0x00, // %
  0x00, 0x38, 0x6C, 0x38, 0x38, 0x76, 0xF6, 0xCE, 0xCC, 0x76, 0x00, 0x00, // &
  0x0C, 0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // '
  0x00, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00, 0x00, // (
  0x00, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00, 0x00, // )
  0x00, 0x00, 0x00, 0x6C, 0x38, 0xFE, 0x38, 0x6C, 0x00, 0x00, 0x00, 0x00, // *
  0x00, 0x00, 0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, // +
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x0C, 0x18, 0x00, // ,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // -
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, // .
  0x00, 0x00, 0x02, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00, 0x00, // /
  0x00, 0x7C, 0xC6, 0xCE, 0xDE, 0xF6, 0xE6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, // 0
  0x00, 0x18, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00, 0x00, // 1
  0x00, 0x7C, 0xC6, 0xC6, 0x0C, 0x18, 0x30, 0x60, 0xC6, 0xFE, 0x00, 0x00, // 2
  0x00, 0x7C, 0xC6, 0x06, 0x06, 0x3C, 0x06, 0x06, 0xC6, 0x7C, 0x00, 0x00, // 3
  0x00, 0x0C, 0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x0C, 0x0C, 0x00, 0x00, // 4
  0x00, 0xFE, 0xC0, 0xC0, 0xC0, 0xFC, 0x06, 0x06, 0xC6, 0x7C, 0x00, 0x00, // 5
  0x00, 0x7C, 0xC6, 0xC0, 0xC0, 0xFC, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, // 6
  0x00, 0xFE, 0xC6, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, // 7
  0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, // 8
  0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x06, 0xC6, 0x7C, 0x00, 0x00, // 9
  0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x00, // :
  0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x0C, 0x18, 0x00, // ;
  0x00, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x60, 0x30, 0x18, 0x0C, 0x00, 0x00, // <
  0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, // =
  0x00, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00, 0x00, // >
  0x00, 0x7C, 0xC6, 0xC6, 0x0C, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, // ?
  0x00, 0x7C, 0xC6, 0xC6, 0xDE, 0xDE, 0xDE, 0xDC, 0xC0, 0x7E, 0x00, 0x00, // @
  0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00, 0x00, // A
  0x00, 0xFC, 0x66, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x66, 0xFC, 0x00, 0x00, // B
  0x00, 0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x00, 0x00, // C
  0x00, 0xF8, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00, 0x00, // D
  0x00, 0xFE, 0x66, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x66, 0xFE, 0x00, 0x00, // E
  0x00, 0xFE, 0x66, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, // F
  0x00, 0x7C, 0xC6, 0xC6, 0xC0, 0xC0, 0xCE, 0xC6, 0xC6, 0x7C, 0x00, 0x00, // G
  0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, // H
  0x00, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, // I
  0x00, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0xD8, 0xD8, 0x70, 0x00, 0x00, // J
  0x00, 0xC6, 0xCC, 0xD8, 0xF0, 0xF0, 0xD8, 0xCC, 0xC6, 0xC6, 0x00, 0x00, // K
  0x00, 0xF0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00, 0x00, // L
  0x00, 0xC6, 0xC6, 0xEE, 0xFE, 0xD6, 0xD6, 0xD6, 0xC6, 0xC6, 0x00, 0x00, // M
  0x00, 0xC6, 0xC6, 0xE6, 0xE6, 0xF6, 0xDE, 0xCE, 0xCE, 0xC6, 0x00, 0x00, // N
  0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, // O
  0x00, 0xFC, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, // P
  0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xD6, 0x7C, 0x06, 0x00, // Q
  0x00, 0xFC, 0x66, 0x66, 0x66, 0x7C, 0x78, 0x6C, 0x66, 0xE6, 0x00, 0x00, // R
  0x00, 0x7C, 0xC6, 0xC0, 0x60, 0x38, 0x0C, 0x06, 0xC6, 0x7C, 0x00, 0x00, // S
  0x00, 0x7E, 0x5A, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, // T
  0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, // U
  0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x10, 0x00, 0x00, // V
  0x00, 0xC6, 0xC6, 0xD6, 0xD6, 0xD6, 0xFE, 0xEE, 0xC6, 0xC6, 0x00, 0x00, // W
  0x00, 0xC6, 0xC6, 0x6C, 0x38, 0x38, 0x38, 0x6C, 0xC6, 0xC6, 0x00, 0x00, // X
  0x00, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, // Y
  0x00, 0xFE, 0xC6, 0x8C, 0x18, 0x30, 0x60, 0xC2, 0xC6, 0xFE, 0x00, 0x00, // Z
  0x00, 0x7C, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7C, 0x00, 0x00, // [
  0x00, 0x00, 0x80, 0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00, 0x00, // '\'
  0x00, 0x7C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x7C, 0x00, 0x00, // ]
  0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ^
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, // _
  0x18, 0x18, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // `
  0x00, 0x00, 0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xDC, 0x76, 0x00, 0x00, // a
  0x00, 0xE0, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x66, 0xFC, 0x00, 0x00, // b
  0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, // c
  0x00, 0x1C, 0x0C, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0xCC, 0x7E, 0x00, 0x00, // d
  0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC6, 0x7C, 0x00, 0x00, // e
  0x00, 0x1C, 0x36, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x30, 0x78, 0x00, 0x00, // f
  0x00, 0x00, 0x00, 0x00, 0x76, 0xCE, 0xC6, 0xC6, 0x7E, 0x06, 0xC6, 0x7C, // g
  0x00, 0xE0, 0x60, 0x60, 0x6C, 0x76, 0x66, 0x66, 0x66, 0xE6, 0x00, 0x00, // h
  0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, // i
  0x00, 0x0C, 0x0C, 0x00, 0x1C, 0x0C, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, // j
  0x00, 0xE0, 0x60, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0xE6, 0x00, 0x00, // k
  0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, // l
  0x00, 0x00, 0x00, 0x00, 0x6C, 0xFE, 0xD6, 0xD6, 0xC6, 0xC6, 0x00, 0x00, // m
  0x00, 0x00, 0x00, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, // n
  0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, // o
  0x00, 0x00, 0x00, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, // p
  0x00, 0x00, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0x0C, 0x1E, // q
  0x00, 0x00, 0x00, 0x00, 0xDC, 0x66, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, // r
  0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0x70, 0x1C, 0xC6, 0x7C, 0x00, 0x00, // s
  0x00, 0x30, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x30, 0x36, 0x1C, 0x00, 0x00, // t
  0x00, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, // u
  0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x10, 0x00, 0x00, // v
  0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xD6, 0xD6, 0xFE, 0x6C, 0x00, 0x00, // w
  0x00, 0x00, 0x00, 0x00, 0xC6, 0x6C, 0x38, 0x38, 0x6C, 0xC6, 0x00, 0x00, // x
  0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xCE, 0x76, 0x06, 0xC6, 0x7C, // y
  0x00, 0x00, 0x00, 0x00, 0xFE, 0x8C, 0x18, 0x30, 0x62, 0xFE, 0x00, 0x00, // z
  0x00, 0x0E, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0E, 0x00, 0x00, // {
  0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, // |
  0x00, 0x70, 0x18, 0x18, 0x18, 0x0E, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, // }
  0x00, 0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // ~
};

/**
 * @brief Estructura que representa la pelota del golf
 */
typedef struct {
    int x, y;      // Posición en píxeles
    int vx, vy;    // Velocidad en x e y
    int size;      // Tamaño de la pelota
} Ball;

/**
 * @brief Estructura que representa el palo de golf
 */
typedef struct {
    int x, y;           // Posición en píxeles
    int width, height;  // Dimensiones del palo
    uint32_t color;     // Color del palo
    int aim_angle;      // Ángulo de apuntado en grados
} Paddle;

/**
 * @brief Estructura que representa el hoyo 
 */
typedef struct {
    int x, y;      // Posición en píxeles
    int size;      // Tamaño del hoyo
} Hole;

// FUNCIONES PRINCIPALES DEL JUEGO

/**
 * @brief Inicia y ejecuta el juego de golf completo
 */
void startGolfGame(void);

/**
 * @brief Muestra el menú principal del juego
 */
void showMenu(void); // falta corregir todavia 

/**
 * @brief Inicializa todas las variables y estructuras del juego
 */
void initGame(void);

/**
 * @brief Actualiza la lógica del juego (física, colisiones, etc.)
 */
void updateGame(void);

/**
 * @brief Renderiza todos los elementos del juego en pantalla
 */
void drawGame(void);

/**
 * @brief Maneja la entrada del usuario (teclado)
 */
void handleInput(void);

// FUNCIONES DE UTILIDAD Y MATEMÁTICAS


/**
 * @brief Genera un número aleatorio entre min y max
 * @param min Valor mínimo del rango
 * @param max Valor máximo del rango
 */
int simpleRandom(int min, int max);

/**
 * @brief Obtiene el tamaño del hoyo según el nivel de dificultad
 * @param level Nivel actual del juego
 */
int getHoleSize(int level);

// FUNCIONES DE RENDERIZADO

/**
 * @brief Dibuja un rectángulo lleno en pantalla
 * @param x Coordenada X de la esquina superior izquierda
 * @param y Coordenada Y de la esquina superior izquierda
 * @param width Ancho del rectángulo
 * @param height Alto del rectángulo
 * @param color Color del rectángulo en formato RGB hexadecimal
 */
void drawRect(int x, int y, int width, int height, uint32_t color);

/**
 * @brief Dibuja un círculo lleno en pantalla
 * @param centerX Coordenada X del centro
 * @param centerY Coordenada Y del centro
 * @param radius Radio del círculo
 * @param color Color del círculo en formato RGB hexadecimal
 */
void drawCircle(int centerX, int centerY, int radius, uint32_t color);

/**
 * @brief Dibuja una línea entre dos puntos
 * @param x1 Coordenada X del punto inicial
 * @param y1 Coordenada Y del punto inicial
 * @param x2 Coordenada X del punto final
 * @param y2 Coordenada Y del punto final
 * @param color Color de la línea en formato RGB hexadecimal
 */
void drawLine(int x1, int y1, int x2, int y2, uint32_t color);

/**
 * @brief Dibuja un número en pantalla usando patrones de píxeles
 * @param number Número a dibujar
 * @param x Coordenada X donde dibujar
 * @param y Coordenada Y donde dibujar
 */
void drawNumber(int number, int x, int y);

/**
 * @brief Dibuja la flecha de apuntado del palo especificado
 * @param paddle Puntero al palo para el cual dibujar la flecha
 */
void drawAimArrow(Paddle* paddle);

/**
 * @brief Dibuja la interfaz de usuario (UI) del juego
 */
void drawUI(void);

// FUNCIONES DE LÓGICA DEL JUEGO

/**
 * @brief Coloca el hoyo en una posición aleatoria válida
 */
void placeHoleRandomly(void);

/**
 * @brief Muestra el mensaje de victoria cuando se completa el juego
 */
void showHoleMessage(void);

/**
 * @brief Muestra el mensaje de nivel completado
 */
void showLevelComplete(void);

/**
 * @brief Reinicia la pelota a su posición inicial
 */
void resetBall(void);

// Agregar estas declaraciones:
/**
 * @brief Actualiza el estado de las teclas presionadas
 */
void updateKeyStates(void);

/**
 * @brief Verifica si una tecla específica está presionada
 * @param key Código de la tecla a verificar
 * @return 1 si está presionada, 0 si no
 */
int isKeyPressed(unsigned char key);

// FUNCIONES DE RENDERIZADO DE TEXTO

/**
 * @brief Dibuja un patrón de carácter 8x12 en la posición especificada
 * @param pattern Puntero al patrón de 12 bytes del carácter
 * @param x Coordenada X donde dibujar el carácter
 * @param y Coordenada Y donde dibujar el carácter
 */
void drawCharPattern(const unsigned char* pattern, int x, int y);

/**
 * @brief Dibuja una cadena de texto usando la fuente 8x12
 * @param text Cadena de texto a dibujar
 * @param x Coordenada X inicial del texto
 * @param y Coordenada Y inicial del texto
 */
void drawSimpleText(const char* text, int x, int y);

/**
 * @brief Obtiene el ancho en píxeles de una cadena de texto
 * @param text Cadena de texto a medir
 * @return Ancho total en píxeles
 */
int getTextWidth(const char* text);

/**
 * @brief Obtiene el patrón de píxeles de un carácter específico
 * @param c Carácter ASCII del cual obtener el patrón
 * @return Puntero al patrón de 12 bytes del carácter
 */
const unsigned char* getCharPattern(char c);

// FUNCIONES DE CONTROL Y LÓGICA DEL JUEGO

/**
 * @brief Maneja la entrada del usuario y actualiza estados de teclas
 */
void handleInput(void);

/**
 * @brief Procesa el movimiento de los paddles según las teclas presionadas
 */
void processMovement(void);

/**
 * @brief Actualiza la lógica del juego (física, colisiones, puntuación)
 */
void updateGame(void);

/**
 * @brief Renderiza todos los elementos del juego en el back buffer
 */
void drawGame(void);

/**
 * @brief Renderiza todos los elementos del juego directamente en pantalla
 */
void renderGame(void);

/**
 * @brief Dibuja la interfaz de usuario (puntuación, nivel, etc.)
 */
void drawUI(void);

void handleInputImproved(void);
void processMovementImproved(void);

#pragma GCC diagnostic pop

#endif